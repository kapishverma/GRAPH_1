import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Runner {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static String[] takeInput() throws IOException {
		String[] strNums;
        strNums = br.readLine().split("\\s");
        int size = 2;
        int[] input = new int[size];
        for (int i = 0; i < size; ++i) {
            input[i] = Integer.parseInt(strNums[i]);
        }


		String[] Graph = new String[input[0]];
		
        for (int i = 0; i < input[0]; ++i) {
            Graph[i] = br.readLine();
        }

        return Graph;
    }

    public static void main(String[] args) throws NumberFormatException, IOException {


        String[] Graph = takeInput();
        System.out.println(new Solution().solve(Graph,Graph.length,Graph[0].length()));


    }
}
//____________________________________________FUNCTION________________________________
public class Solution {
	

	boolean helperSearchingFunction(char[][] matrix , boolean[][] visited , String search , int si , int i , int j){
            if(si==search.length())return true;

			char current =  search.charAt(si);
			boolean result = false;

			if(i-1>=0){
                 if(matrix[i-1][j] == current && !visited[i-1][j]){
					 visited[i-1][j]=true;
                    result = helperSearchingFunction( matrix, visited, search, si+1 , i-1 , j);
                     if(result==true)return result;
						visited[i - 1][j] = false;
				 }
				  if(j+1<matrix[0].length){
				 	if (matrix[i - 1][j+1] == current && !visited[i - 1][j+1]) {
						visited[i - 1][j+1] = true;
						result = helperSearchingFunction(matrix, visited, search, si + 1, i - 1, j+1);
						if (result == true)return result;
						visited[i - 1][j+1] = false;
					}
				  }
				    if( j-1>=0){
					if (matrix[i - 1][j-1] == current && !visited[i - 1][j-1]) {
						visited[i - 1][j-1] = true;
						result = helperSearchingFunction(matrix, visited, search, si + 1, i - 1, j-1);
						if (result == true)return result;
						visited[i - 1][j-1] = false;
					}
				}
			}
			if(i+1<matrix.length){
                 if(matrix[i+1][j] == current && !visited[i+1][j]){
					 visited[i+1][j]=true;
                    result = helperSearchingFunction( matrix, visited, search, si+1 , i+1 , j);
                     if(result==true)return result;
						visited[i + 1][j] = false;
				 }
				 if(j+1<matrix[0].length){
				 	if (matrix[i + 1][j+1] == current && !visited[i + 1][j+1]) {
						visited[i + 1][j+1] = true;
						result = helperSearchingFunction(matrix, visited, search, si + 1, i + 1, j+1);
						if (result == true)return result;
						visited[i + 1][j+1] = false;
					}
				 }
				 if( j-1>=0){
					if (matrix[i + 1][j-1] == current && !visited[i + 1][j-1]) {
						visited[i + 1][j-1] = true;
						result = helperSearchingFunction(matrix, visited, search, si + 1, i + 1, j-1);
						if (result == true)return result;
						visited[i + 1][j-1] = false;
					}
				 }
			}
			if(j-1>=0){
				if (matrix[i][j-1] == current && !visited[i][j-1]) {
						visited[i][j-1] = true;
						result = helperSearchingFunction(matrix, visited, search, si + 1, i , j-1);
						if (result == true)return result;
						visited[i][j-1] = false;
			}
		}
		if (j + 1 < matrix[0].length) {
			if (matrix[i ][j + 1] == current && !visited[i][j + 1]) {
				visited[i][j + 1] = true;
				result = helperSearchingFunction(matrix, visited, search, si + 1, i, j + 1);
				if (result == true)
					return result;
				visited[i][j + 1] = false;
			}
		}
	  return false;
	}
	int solve(String[] Graph , int N, int M){
	
	String search = "CODINGNINJA";
	char[][] matrix = new char[N][M];
	boolean[][] visited = new boolean[N][M];
	for(int i  = 0 ; i < N ; i++){

           String str = Graph[i];

		   for(int j = 0 ; j< M ; j++){

		   matrix[i][j] = str.charAt(j);
		   }
	  }
	  for(int i = 0 ; i< N ; i++){

		  for(int j = 0 ; j < M ; j++){

			  if(matrix[i][j]=='C'){
				  visited[i][j]=true;
	                boolean result = helperSearchingFunction(matrix , visited , search ,1 , i , j );
			              if(result==true)return 1;
						  visited[i][j]=false;
			  }
		  }
	  }
return 0;
   }	
}
